import{c as e}from"./index.61f09c13.js";import{s as t}from"./utils.94e61320.js";import"./vendor.943e55ed.js";const o=document.querySelector("#canvas"),n=document.querySelector("#num-points"),a=document.querySelector("#num-points-value"),r=document.querySelector("#point-size"),i=document.querySelector("#point-size-value"),s=document.querySelector("#opacity"),c=document.querySelector("#opacity-value"),l=document.querySelector("#click-lasso-initiator"),u=document.querySelector("#reset"),d=document.querySelector("#export"),m=document.querySelector("#example-transition");m.setAttribute("class","active"),m.removeAttribute("href");let v=[],p=[],y=1e5,g=2,h=.33,f=[];const S=e({canvas:o,lassoMinDelay:10,lassoMinDist:2,pointSize:g,showReticle:!0,reticleColor:[1,1,.878431373,.33],lassoInitiator:!0});d.addEventListener("click",(()=>t(S))),console.log(`Scatterplot v${S.get("version")}`),S.subscribe("select",(({points:e})=>{if(console.log("Selected:",e),f=e,1===f.length){const e=v[f[0]];console.log(`X: ${e[0]}\nY: ${e[1]}\nCategory: ${e[2]}\nValue: ${e[3]}`)}})),S.subscribe("deselect",(()=>{console.log("Deselected:",f),f=[]}));const M=e=>{var t;y=e,n.value=y,a.innerHTML=y,t=y,v=[...new Array(Math.round(t/2)).fill().map((()=>[-1+Math.random(),2*Math.random()/3-1,0,.33*Math.random()])),...new Array(Math.round(t/2)).fill().map((()=>[Math.random(),2*Math.random()-1,1,.66+.33*Math.random()]))],p=[v,v.map((([e,t,o,n],a)=>a<v.length/2?[e,3*(t+1)-1,o,n+.66]:[e,(t+1)/3-1,o,n-.66]))],S.draw(v)};n.addEventListener("input",(e=>{a.innerHTML=+e.target.value+" <em>release to redraw</em>"}));n.addEventListener("change",(e=>M(+e.target.value)));const b=e=>{g=e,r.value=g,i.innerHTML=g,S.set({pointSize:g})};r.addEventListener("input",(e=>b(+e.target.value)));const q=e=>{h=e,s.value=h,c.innerHTML=h,S.set({opacity:h})};s.addEventListener("input",(e=>q(+e.target.value)));l.addEventListener("change",(e=>{S.set({lassoInitiator:e.target.checked})})),l.checked=S.get("lassoInitiator");u.addEventListener("click",(()=>{S.reset()}));S.set({colorBy:"category",pointColor:["#3a78aa","#aa3a99"]});S.set({colorBy:"value",pointColor:["#ff80cb","#df80b8","#bf80a5","#9f8092","#808080","#75919f","#6ba3bf","#61b5df","#57c7ff"]}),b(g),q(h),M(y);let L=0;const E=()=>{L++,S.draw(p[L%p.length],{transition:!0,transitionDuration:1e3-(L-1)%5*150,transitionEasing:"quadInOut"}).then((()=>{setTimeout(E,3e3*+!(L%5))}))};E();
